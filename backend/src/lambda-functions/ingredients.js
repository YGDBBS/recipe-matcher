"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const dynamoClient = new client_dynamodb_1.DynamoDBClient({});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoClient);
const handler = async (event) => {
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type,Authorization',
        'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
    };
    try {
        const { httpMethod, path, queryStringParameters } = event;
        const body = event.body ? JSON.parse(event.body) : {};
        if (httpMethod === 'OPTIONS') {
            return {
                statusCode: 200,
                headers,
                body: '',
            };
        }
        if (path === '/ingredients' && httpMethod === 'GET') {
            return await getIngredients(queryStringParameters);
        }
        if (path === '/ingredients' && httpMethod === 'POST') {
            return await createIngredient(body);
        }
        if (path === '/user-ingredients' && httpMethod === 'GET') {
            return await getUserIngredients(event.headers.Authorization, queryStringParameters);
        }
        if (path === '/user-ingredients' && httpMethod === 'POST') {
            return await addUserIngredient(body, event.headers.Authorization);
        }
        if (path === '/user-ingredients' && httpMethod === 'DELETE') {
            return await removeUserIngredient(body, event.headers.Authorization);
        }
        return {
            statusCode: 404,
            headers,
            body: JSON.stringify({ error: 'Not found' }),
        };
    }
    catch (error) {
        console.error('Ingredients error:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ error: 'Internal server error' }),
        };
    }
};
exports.handler = handler;
async function getIngredients(queryParams) {
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
    };
    try {
        const { category, search, limit = '50' } = queryParams || {};
        let ingredients = [];
        if (search) {
            // Search ingredients by name
            const result = await docClient.send(new lib_dynamodb_1.ScanCommand({
                TableName: process.env.INGREDIENTS_TABLE,
                FilterExpression: 'contains(#name, :search)',
                ExpressionAttributeNames: {
                    '#name': 'name',
                },
                ExpressionAttributeValues: {
                    ':search': search.toLowerCase(),
                },
                Limit: parseInt(limit),
            }));
            ingredients = result.Items || [];
        }
        else if (category) {
            // Filter by category
            const result = await docClient.send(new lib_dynamodb_1.ScanCommand({
                TableName: process.env.INGREDIENTS_TABLE,
                FilterExpression: 'category = :category',
                ExpressionAttributeValues: {
                    ':category': category,
                },
                Limit: parseInt(limit),
            }));
            ingredients = result.Items || [];
        }
        else {
            // Get all ingredients
            const result = await docClient.send(new lib_dynamodb_1.ScanCommand({
                TableName: process.env.INGREDIENTS_TABLE,
                Limit: parseInt(limit),
            }));
            ingredients = result.Items || [];
        }
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ ingredients }),
        };
    }
    catch (error) {
        console.error('Get ingredients error:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ error: 'Failed to get ingredients' }),
        };
    }
}
async function createIngredient(ingredientData) {
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
    };
    try {
        const ingredientId = generateId();
        const now = new Date().toISOString();
        const ingredient = {
            ingredientId,
            name: ingredientData.name.toLowerCase(),
            category: ingredientData.category || 'other',
            commonUnits: ingredientData.commonUnits || ['cup', 'tbsp', 'tsp', 'piece'],
            createdAt: now,
        };
        await docClient.send(new lib_dynamodb_1.PutCommand({
            TableName: process.env.INGREDIENTS_TABLE,
            Item: ingredient,
        }));
        return {
            statusCode: 201,
            headers,
            body: JSON.stringify({ ingredient }),
        };
    }
    catch (error) {
        console.error('Create ingredient error:', error);
        return {
            statusCode: 400,
            headers,
            body: JSON.stringify({ error: 'Failed to create ingredient' }),
        };
    }
}
async function getUserIngredients(authorization, queryParams) {
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
    };
    try {
        if (!authorization) {
            return {
                statusCode: 401,
                headers,
                body: JSON.stringify({ error: 'Authorization required' }),
            };
        }
        const userId = extractUserIdFromToken(authorization);
        const { limit = '50' } = queryParams || {};
        const result = await docClient.send(new lib_dynamodb_1.QueryCommand({
            TableName: process.env.USER_INGREDIENTS_TABLE,
            KeyConditionExpression: 'userId = :userId',
            ExpressionAttributeValues: {
                ':userId': userId,
            },
            Limit: parseInt(limit),
        }));
        const userIngredients = result.Items || [];
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ userIngredients }),
        };
    }
    catch (error) {
        console.error('Get user ingredients error:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ error: 'Failed to get user ingredients' }),
        };
    }
}
async function addUserIngredient(ingredientData, authorization) {
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
    };
    try {
        if (!authorization) {
            return {
                statusCode: 401,
                headers,
                body: JSON.stringify({ error: 'Authorization required' }),
            };
        }
        const userId = extractUserIdFromToken(authorization);
        const now = new Date().toISOString();
        const userIngredient = {
            userId,
            ingredientId: ingredientData.ingredientId || generateId(),
            name: ingredientData.name.toLowerCase(),
            quantity: ingredientData.quantity,
            unit: ingredientData.unit,
            expiryDate: ingredientData.expiryDate,
            addedAt: now,
        };
        await docClient.send(new lib_dynamodb_1.PutCommand({
            TableName: process.env.USER_INGREDIENTS_TABLE,
            Item: userIngredient,
        }));
        return {
            statusCode: 201,
            headers,
            body: JSON.stringify({ userIngredient }),
        };
    }
    catch (error) {
        console.error('Add user ingredient error:', error);
        return {
            statusCode: 400,
            headers,
            body: JSON.stringify({ error: 'Failed to add ingredient' }),
        };
    }
}
async function removeUserIngredient(ingredientData, authorization) {
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
    };
    try {
        if (!authorization) {
            return {
                statusCode: 401,
                headers,
                body: JSON.stringify({ error: 'Authorization required' }),
            };
        }
        const userId = extractUserIdFromToken(authorization);
        const { ingredientId } = ingredientData;
        if (!ingredientId) {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'Ingredient ID required' }),
            };
        }
        await docClient.send(new lib_dynamodb_1.DeleteCommand({
            TableName: process.env.USER_INGREDIENTS_TABLE,
            Key: {
                userId,
                ingredientId,
            },
        }));
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ message: 'Ingredient removed successfully' }),
        };
    }
    catch (error) {
        console.error('Remove user ingredient error:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ error: 'Failed to remove ingredient' }),
        };
    }
}
function generateId() {
    return Math.random().toString(36).substr(2, 9);
}
function extractUserIdFromToken(authorization) {
    const token = authorization.replace('Bearer ', '');
    return token;
}
//# sourceMappingURL=data:application/json;base64,