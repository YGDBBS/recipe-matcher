"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ingredient_normalizer_1 = require("../utils/ingredient-normalizer");
// Test the ingredient normalizer
console.log('🧪 Testing Ingredient Normalizer\n');
// Test cases
const testIngredients = [
    'Chicken Breast',
    'Fresh Tomatoes',
    'Diced Onions',
    'Ground Beef',
    'Cherry Tomatoes',
    'Red Bell Peppers',
    'Chopped Garlic',
    'Olive Oil',
    'Sea Salt',
    'Fresh Basil Leaves'
];
console.log('📝 Testing normalizeIngredient:');
testIngredients.forEach(ingredient => {
    const normalized = (0, ingredient_normalizer_1.normalizeIngredient)(ingredient);
    console.log(`  "${ingredient}" → "${normalized}"`);
});
console.log('\n🔄 Testing generateIngredientVariations:');
testIngredients.slice(0, 3).forEach(ingredient => {
    const variations = (0, ingredient_normalizer_1.generateIngredientVariations)(ingredient);
    console.log(`  "${ingredient}":`);
    console.log(`    Variations: [${variations.join(', ')}]`);
});
console.log('\n📦 Testing createNormalizedIngredient:');
testIngredients.slice(0, 2).forEach(ingredient => {
    const result = (0, ingredient_normalizer_1.createNormalizedIngredient)(ingredient);
    console.log(`  Original: "${result.original}"`);
    console.log(`  Normalized: "${result.normalized}"`);
    console.log(`  Variations: [${result.variations.join(', ')}]`);
    console.log('');
});
console.log('🔍 Testing areIngredientsSimilar:');
const similarityTests = [
    ['chicken', 'chicken breast'],
    ['tomato', 'tomatoes'],
    ['onion', 'diced onion'],
    ['beef', 'ground beef'],
    ['garlic', 'garlic clove'],
    ['oil', 'olive oil']
];
similarityTests.forEach(([ing1, ing2]) => {
    const similar = (0, ingredient_normalizer_1.areIngredientsSimilar)(ing1, ing2);
    console.log(`  "${ing1}" vs "${ing2}": ${similar ? '✅ Similar' : '❌ Different'}`);
});
console.log('\n🎯 Testing findBestIngredientMatch:');
const pantryIngredients = ['chicken', 'tomato', 'onion', 'garlic'];
const recipeIngredients = [
    'chicken breast',
    'cherry tomatoes',
    'diced onions',
    'garlic cloves',
    'olive oil',
    'salt'
];
pantryIngredients.forEach(pantryIngredient => {
    const match = (0, ingredient_normalizer_1.findBestIngredientMatch)(pantryIngredient, recipeIngredients);
    console.log(`  Pantry: "${pantryIngredient}"`);
    if (match) {
        console.log(`    Best match: "${match.ingredient}" (score: ${match.score})`);
    }
    else {
        console.log(`    No match found`);
    }
});
console.log('\n✅ Ingredient normalizer tests completed!');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1pbmdyZWRpZW50LW5vcm1hbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LWluZ3JlZGllbnQtbm9ybWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBFQU13QztBQUV4QyxpQ0FBaUM7QUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBRWxELGFBQWE7QUFDYixNQUFNLGVBQWUsR0FBRztJQUN0QixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLFVBQVU7SUFDVixvQkFBb0I7Q0FDckIsQ0FBQztBQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUMvQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0lBQ25DLE1BQU0sVUFBVSxHQUFHLElBQUEsMkNBQW1CLEVBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLFVBQVUsUUFBUSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0FBQzFELGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtJQUMvQyxNQUFNLFVBQVUsR0FBRyxJQUFBLG9EQUE0QixFQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxVQUFVLElBQUksQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVELENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0FBQ3hELGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtJQUMvQyxNQUFNLE1BQU0sR0FBRyxJQUFBLGtEQUEwQixFQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ2pELE1BQU0sZUFBZSxHQUFHO0lBQ3RCLENBQUMsU0FBUyxFQUFFLGdCQUFnQixDQUFDO0lBQzdCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQztJQUN0QixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7SUFDeEIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDO0lBQ3ZCLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQztJQUMxQixDQUFDLEtBQUssRUFBRSxXQUFXLENBQUM7Q0FDckIsQ0FBQztBQUVGLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLElBQUEsNkNBQXFCLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSSxNQUFNLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0FBQ3BGLENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQ3JELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNuRSxNQUFNLGlCQUFpQixHQUFHO0lBQ3hCLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLGVBQWU7SUFDZixXQUFXO0lBQ1gsTUFBTTtDQUNQLENBQUM7QUFFRixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtJQUMzQyxNQUFNLEtBQUssR0FBRyxJQUFBLCtDQUF1QixFQUFDLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLGdCQUFnQixHQUFHLENBQUMsQ0FBQztJQUMvQyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxDQUFDLFVBQVUsYUFBYSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUMvRSxDQUFDO1NBQU0sQ0FBQztRQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNwQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBcbiAgbm9ybWFsaXplSW5ncmVkaWVudCwgXG4gIGdlbmVyYXRlSW5ncmVkaWVudFZhcmlhdGlvbnMsIFxuICBjcmVhdGVOb3JtYWxpemVkSW5ncmVkaWVudCxcbiAgYXJlSW5ncmVkaWVudHNTaW1pbGFyLFxuICBmaW5kQmVzdEluZ3JlZGllbnRNYXRjaCBcbn0gZnJvbSAnLi4vdXRpbHMvaW5ncmVkaWVudC1ub3JtYWxpemVyJztcblxuLy8gVGVzdCB0aGUgaW5ncmVkaWVudCBub3JtYWxpemVyXG5jb25zb2xlLmxvZygn8J+nqiBUZXN0aW5nIEluZ3JlZGllbnQgTm9ybWFsaXplclxcbicpO1xuXG4vLyBUZXN0IGNhc2VzXG5jb25zdCB0ZXN0SW5ncmVkaWVudHMgPSBbXG4gICdDaGlja2VuIEJyZWFzdCcsXG4gICdGcmVzaCBUb21hdG9lcycsXG4gICdEaWNlZCBPbmlvbnMnLFxuICAnR3JvdW5kIEJlZWYnLFxuICAnQ2hlcnJ5IFRvbWF0b2VzJyxcbiAgJ1JlZCBCZWxsIFBlcHBlcnMnLFxuICAnQ2hvcHBlZCBHYXJsaWMnLFxuICAnT2xpdmUgT2lsJyxcbiAgJ1NlYSBTYWx0JyxcbiAgJ0ZyZXNoIEJhc2lsIExlYXZlcydcbl07XG5cbmNvbnNvbGUubG9nKCfwn5OdIFRlc3Rpbmcgbm9ybWFsaXplSW5ncmVkaWVudDonKTtcbnRlc3RJbmdyZWRpZW50cy5mb3JFYWNoKGluZ3JlZGllbnQgPT4ge1xuICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplSW5ncmVkaWVudChpbmdyZWRpZW50KTtcbiAgY29uc29sZS5sb2coYCAgXCIke2luZ3JlZGllbnR9XCIg4oaSIFwiJHtub3JtYWxpemVkfVwiYCk7XG59KTtcblxuY29uc29sZS5sb2coJ1xcbvCflIQgVGVzdGluZyBnZW5lcmF0ZUluZ3JlZGllbnRWYXJpYXRpb25zOicpO1xudGVzdEluZ3JlZGllbnRzLnNsaWNlKDAsIDMpLmZvckVhY2goaW5ncmVkaWVudCA9PiB7XG4gIGNvbnN0IHZhcmlhdGlvbnMgPSBnZW5lcmF0ZUluZ3JlZGllbnRWYXJpYXRpb25zKGluZ3JlZGllbnQpO1xuICBjb25zb2xlLmxvZyhgICBcIiR7aW5ncmVkaWVudH1cIjpgKTtcbiAgY29uc29sZS5sb2coYCAgICBWYXJpYXRpb25zOiBbJHt2YXJpYXRpb25zLmpvaW4oJywgJyl9XWApO1xufSk7XG5cbmNvbnNvbGUubG9nKCdcXG7wn5OmIFRlc3RpbmcgY3JlYXRlTm9ybWFsaXplZEluZ3JlZGllbnQ6Jyk7XG50ZXN0SW5ncmVkaWVudHMuc2xpY2UoMCwgMikuZm9yRWFjaChpbmdyZWRpZW50ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gY3JlYXRlTm9ybWFsaXplZEluZ3JlZGllbnQoaW5ncmVkaWVudCk7XG4gIGNvbnNvbGUubG9nKGAgIE9yaWdpbmFsOiBcIiR7cmVzdWx0Lm9yaWdpbmFsfVwiYCk7XG4gIGNvbnNvbGUubG9nKGAgIE5vcm1hbGl6ZWQ6IFwiJHtyZXN1bHQubm9ybWFsaXplZH1cImApO1xuICBjb25zb2xlLmxvZyhgICBWYXJpYXRpb25zOiBbJHtyZXN1bHQudmFyaWF0aW9ucy5qb2luKCcsICcpfV1gKTtcbiAgY29uc29sZS5sb2coJycpO1xufSk7XG5cbmNvbnNvbGUubG9nKCfwn5SNIFRlc3RpbmcgYXJlSW5ncmVkaWVudHNTaW1pbGFyOicpO1xuY29uc3Qgc2ltaWxhcml0eVRlc3RzID0gW1xuICBbJ2NoaWNrZW4nLCAnY2hpY2tlbiBicmVhc3QnXSxcbiAgWyd0b21hdG8nLCAndG9tYXRvZXMnXSxcbiAgWydvbmlvbicsICdkaWNlZCBvbmlvbiddLFxuICBbJ2JlZWYnLCAnZ3JvdW5kIGJlZWYnXSxcbiAgWydnYXJsaWMnLCAnZ2FybGljIGNsb3ZlJ10sXG4gIFsnb2lsJywgJ29saXZlIG9pbCddXG5dO1xuXG5zaW1pbGFyaXR5VGVzdHMuZm9yRWFjaCgoW2luZzEsIGluZzJdKSA9PiB7XG4gIGNvbnN0IHNpbWlsYXIgPSBhcmVJbmdyZWRpZW50c1NpbWlsYXIoaW5nMSwgaW5nMik7XG4gIGNvbnNvbGUubG9nKGAgIFwiJHtpbmcxfVwiIHZzIFwiJHtpbmcyfVwiOiAke3NpbWlsYXIgPyAn4pyFIFNpbWlsYXInIDogJ+KdjCBEaWZmZXJlbnQnfWApO1xufSk7XG5cbmNvbnNvbGUubG9nKCdcXG7wn46vIFRlc3RpbmcgZmluZEJlc3RJbmdyZWRpZW50TWF0Y2g6Jyk7XG5jb25zdCBwYW50cnlJbmdyZWRpZW50cyA9IFsnY2hpY2tlbicsICd0b21hdG8nLCAnb25pb24nLCAnZ2FybGljJ107XG5jb25zdCByZWNpcGVJbmdyZWRpZW50cyA9IFtcbiAgJ2NoaWNrZW4gYnJlYXN0JyxcbiAgJ2NoZXJyeSB0b21hdG9lcycsIFxuICAnZGljZWQgb25pb25zJyxcbiAgJ2dhcmxpYyBjbG92ZXMnLFxuICAnb2xpdmUgb2lsJyxcbiAgJ3NhbHQnXG5dO1xuXG5wYW50cnlJbmdyZWRpZW50cy5mb3JFYWNoKHBhbnRyeUluZ3JlZGllbnQgPT4ge1xuICBjb25zdCBtYXRjaCA9IGZpbmRCZXN0SW5ncmVkaWVudE1hdGNoKHBhbnRyeUluZ3JlZGllbnQsIHJlY2lwZUluZ3JlZGllbnRzKTtcbiAgY29uc29sZS5sb2coYCAgUGFudHJ5OiBcIiR7cGFudHJ5SW5ncmVkaWVudH1cImApO1xuICBpZiAobWF0Y2gpIHtcbiAgICBjb25zb2xlLmxvZyhgICAgIEJlc3QgbWF0Y2g6IFwiJHttYXRjaC5pbmdyZWRpZW50fVwiIChzY29yZTogJHttYXRjaC5zY29yZX0pYCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coYCAgICBObyBtYXRjaCBmb3VuZGApO1xuICB9XG59KTtcblxuY29uc29sZS5sb2coJ1xcbuKchSBJbmdyZWRpZW50IG5vcm1hbGl6ZXIgdGVzdHMgY29tcGxldGVkIScpO1xuIl19